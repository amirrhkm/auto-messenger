// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const getScheduledMessages = `-- name: GetScheduledMessages :many
SELECT id, phone_number, content
FROM messages
WHERE scheduled_at <= NOW()
AND status = 'pending'
`

type GetScheduledMessagesRow struct {
	ID          int32
	PhoneNumber string
	Content     string
}

func (q *Queries) GetScheduledMessages(ctx context.Context) ([]GetScheduledMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getScheduledMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScheduledMessagesRow
	for rows.Next() {
		var i GetScheduledMessagesRow
		if err := rows.Scan(&i.ID, &i.PhoneNumber, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageStatus = `-- name: UpdateMessageStatus :exec
UPDATE messages
SET status = $2
WHERE id = $1
`

type UpdateMessageStatusParams struct {
	ID     int32
	Status sql.NullString
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateMessageStatus, arg.ID, arg.Status)
	return err
}
